#!groovy

/* 
    This script will ensure an secret text secret is present or absent and the 
    the content is up to date
*/

import hudson.model.*
import jenkins.model.*
import jenkins.*
import hudson.*
import hudson.util.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import org.jenkinsci.plugins.plaincredentials.*
import org.jenkinsci.plugins.plaincredentials.impl.*


//Main()
def credentialsStore = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
def domain = Domain.global()

def oldCredential = null
def credentialExists = false

// check if credential exists if it does set the flag true and save the current credential
println("Checking for secret text secret with id ${secretId}")
credentialsStore?.getCredentials(domain).each{
    if (it.id == "${secretId}") {
        credentialExists = true
        oldCredential = it
        println("${secretId} found")
    }
}

// if the secret state is present, create or update
if ("${secretState}" == "present") {
    // if found check that the text is the same
    if (credentialExists) {
        if ("${secretText}" == oldCredential.secret.getPlainText()) {
            println("secret text for secret ${secretId}  hasn't changed, nothing to update")
        }
        // an update is needed
        else {
            println("Updating the credential ${secretId} the secret text is different")

            newCredential = new StringCredentialsImpl(
                CredentialsScope.GLOBAL,
                "${secretId}",
                "${secretId} text secret generated by ansible",
                Secret.fromString("${secretText}")
            )

            credentialsStore.updateCredentials(domain, oldCredential, newCredential)
        }
    }
    // since the credential doesn't exist, create it
    else {
        println("Creating the credential ${secretId} since it doesn't exist")

        credential = new StringCredentialsImpl(
            CredentialsScope.GLOBAL,
            "${secretId}",
            "${secretId} text secret generated by ansible",
            Secret.fromString("${secretText}")
        )

        credentialsStore.addCredentials(domain, credential)
    }
}
// remove the secret if it exists
else if ("${secretState}" == "absent") {
    // if the credntial exists, remove it
    if (credentialExists) {
        println("Removing secret text credential ${secretId}")
        credentialsStore.removeCredentials(domain, oldCredential)
    }
    // the credential doesn't exist, no action
    else {
        println("No credential found ${secretId}, nothing to remove")
    }
}
// error out since the secret state isn't correct
else {
    println("The state of the secret must be present or absent")
}